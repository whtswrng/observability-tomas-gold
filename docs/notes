

## Client
- Initial load (/v1/user)
- Login page
    - POST ("/v1/login")
- Entity list page
    - Table with entities (GET "/v1/entities")
- Host details page
    - CPU avg load for n minutes (BigNumber) (GET /v1/metrics?entityId=123&startTime=123&endTime=123)
    - CPU avg load time-series for n minutes (Series)
    - "Is there high CPU load RIGHT NOW?" Yes/No

## (done) Server (BFF)
Deals with sessions
- GET /v1/user
- POST /v1/login

## (done) Host Agent (Collector Agent)
Agent runs on the client machine and collects the CPU metrics and sends them to Collector -> /v1/collect

## (done) Collector (Centrallized Collector) 
Collects and stores the metrics
- POST (/v1/collect)

## (done) Data Service
Provides all information about entities and their metrics
- GET /v1/data/entities
- GET /v1/data/metrics?entityId=123&startTime=123&endTime=123

## (progress) Alerting Service
Periodically fetches host metrics and alerts if neccessary
- GET /v1/alerts - returns active alerts



# Progress

(be x) - The alerting logic in your application should have tests.
(be done, fe x) - What is my computer's current average CPU load?
(be done, fe x) - The front-end application should communicate with a local back-end service to retrieve CPU load average information from your computer (see below).
(be done, fe x) - The front-end application should retrieve CPU load information every 10 seconds.
(be done, fe x) - The front-end application should maintain a 10 minute window of historical CPU load information.
(be done, fe x) - The front-end application should alert the user to high CPU load.
(be done, fe x) - The front-end application should alert the user when CPU load has recovered.


FE
- error boundaries
- current route highlight
- breadcrumbs
- handle errors in the widgets when connection goes south
x alerts
x hosts details
    x time window
    x widgets
